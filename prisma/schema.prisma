// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================
// ENUMS
// ============================

enum UserRole {
  CUSTOMER @map("customer")
  VENDOR   @map("vendor")

  @@map("user_roles")
}

// ============================
// MODELS
// ============================

model Admin {
  id       String @id @default(cuid()) @map("id")
  email    String @unique @map("email")
  password String @map("password")
  name     String @map("name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model User {
  id       String   @id @default(cuid()) @map("id")
  phone    String   @unique @map("phone")
  password String   @map("password")
  email    String?  @unique @map("email")
  role     UserRole @default(CUSTOMER) @map("role")

  customerProfile CustomerProfile?
  vendorProfile   VendorProfile?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Address {
  id       String @id @default(cuid()) @map("id")
  province String @map("province")
  district String @map("district")
  ward     String @map("ward")
  street   String @map("street")

  customerProfileId String?

  customerProfile CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  vendorProfile   VendorProfile?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("addresses")
}

model CustomerProfile {
  id       String @id @default(cuid()) @map("id")
  fullName String @map("full_name")

  userId String @unique @map("user_id")

  user      User      @relation(fields: [userId], references: [id])
  addresses Address[]

  @@map("customer_profiles")
}

model VendorProfile {
  id          String @id @default(cuid()) @map("id")
  shopName    String @map("shop_name")
  bankAccount String @map("bank_account")

  userId    String @unique @map("user_id")
  addressId String? @unique @map("address_id")

  user    User          @relation(fields: [userId], references: [id])
  address Address?       @relation(fields: [addressId], references: [id])
  images  VendorImage[]

  @@map("vendor_profiles")
}

model VendorImage {
  id  String @id @default(cuid()) @map("id")
  url String @map("url")

  vendorId String @map("vendor_id")

  vendor VendorProfile @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_images")
}
