// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================
// ENUMS
// ============================

enum UserRole {
  CUSTOMER @map("customer")
  VENDOR   @map("vendor")

  @@map("user_roles")
}

enum PaymentMethod {
  COD    @map("cod")
  QRCODE @map("qrcode")

  @@map("payment_methods")
}

enum PaymentStatus {
  PENDING   @map("pending")
  COMPLETED @map("completed")
  FAILED    @map("failed")

  @@map("payment_statuses")
}

enum OrderStatus {
  PENDING_CONFIRMATION @map("pending_confirmation") // Chờ xác nhận
  CONFIRMED            @map("confirmed") // Đã xác nhận
  PICKED_UP            @map("picked_up") // Đã lấy đồ
  IN_WASHING           @map("in_washing") // Đang giặt
  PAYMENT_REQUIRED     @map("payment_required") // Cần thanh toán
  COMPLETED            @map("completed") // Hoàn tất
  CANCELLED            @map("cancelled") // Đã hủy

  @@map("order_statuses")
}

enum PickupType {
  HOME  @map("home") // Giao tại nhà
  STORE @map("store") // Giao tại cửa hàng

  @@map("pickup_types")
}

// ============================
// MODELS
// ============================

model Admin {
  id       String @id @default(cuid()) @map("id")
  email    String @unique @map("email")
  password String @map("password")
  name     String @map("name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model User {
  id       String   @id @default(cuid()) @map("id")
  phone    String   @unique @map("phone")
  password String   @map("password")
  email    String?  @unique @map("email")
  role     UserRole @default(CUSTOMER) @map("role")

  customerProfile CustomerProfile?
  vendorProfile   VendorProfile?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Address {
  id       String @id @default(cuid()) @map("id")
  province String @map("province")
  district String @map("district")
  ward     String @map("ward")
  street   String @map("street")

  customerProfileId String?

  customerProfile CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  vendorProfile   VendorProfile?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("addresses")
}

model CustomerProfile {
  id       String @id @default(cuid()) @map("id")
  fullName String @map("full_name")

  userId String @unique @map("user_id")

  user      User      @relation(fields: [userId], references: [id])
  addresses Address[]
  Order     Order[]

  @@map("customer_profiles")
}

model VendorProfile {
  id       String @id @default(cuid()) @map("id")
  shopName String @map("shop_name")

  userId    String  @unique @map("user_id")
  addressId String? @unique @map("address_id")

  user              User               @relation(fields: [userId], references: [id])
  address           Address?           @relation(fields: [addressId], references: [id])
  images            VendorImage[]
  vendorServiceFees VendorServiceFee[]
  Order             Order[]

  @@map("vendor_profiles")
}

model VendorImage {
  id  String @id @default(cuid()) @map("id")
  url String @map("url")

  vendorId String @map("vendor_id")

  vendor VendorProfile @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_images")
}

model VendorServiceFee {
  id   String @id @default(cuid()) @map("id")
  name String @map("name")
  fee  Int    @map("fee") // fee per kg

  vendorId String @map("vendor_id")

  vendor VendorProfile @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("vendor_service_fees")
}

model Order {
  id            String        @id @default(cuid()) @map("id")
  status        OrderStatus   @default(PENDING_CONFIRMATION) @map("status")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  paymentMethod PaymentMethod @default(COD) @map("payment_method")
  pickupType    PickupType    @default(STORE) @map("pickup_type")
  servicePrice  Int           @default(0) @map("service_price")
  deliveryFee   Int           @default(0) @map("delivery_fee")
  notes         String?       @map("notes")

  customerId String @map("customer_id")
  vendorId   String @map("vendor_id")

  customer CustomerProfile @relation(fields: [customerId], references: [id])
  vendor   VendorProfile   @relation(fields: [vendorId], references: [id])
  items    OrderItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid()) @map("id")
  name      String @map("name")
  quantity  Float  @map("quantity") // in kg
  unitPrice Int    @map("unit_price") // price per kg

  orderId String @map("order_id")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_items")
}
